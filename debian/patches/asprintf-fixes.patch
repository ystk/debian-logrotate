Description: Allow logrotate to build with hardening options.
 Fix asprintf() return check warnings, don't override built in
 asprintf() macro if we're building hardened.
Author: Paul Martin <pm@debian.org>

Index: logrotate-3.8.1/config.c
===================================================================
--- logrotate-3.8.1.orig/config.c	2012-05-17 00:36:09.722279662 +0100
+++ logrotate-3.8.1/config.c	2012-05-17 00:36:13.146342816 +0100
@@ -42,7 +42,7 @@
 #include "asprintf.c"
 #endif
 
-#if !defined(asprintf)
+#if !defined(asprintf) && !defined(_FORTIFY_SOURCE)
 #include <stdarg.h>
 
 int asprintf(char **string_ptr, const char *format, ...)
@@ -257,7 +257,9 @@
 
 	/* Check if fname is ending in a taboo-extension; if so, return false */
 	for (i = 0; i < tabooCount; i++) {
-		asprintf(&pattern, "*%s", tabooExts[i]);
+		if (asprintf(&pattern, "*%s", tabooExts[i]) < 0) {
+			message(MESS_FATAL, "failed to allocate taboo pattern memory\n");
+		}
 		if (!fnmatch(pattern, fname, 0))
 		{
 			free(pattern);
Index: logrotate-3.8.1/logrotate.c
===================================================================
--- logrotate-3.8.1.orig/logrotate.c	2012-05-17 00:36:09.722279662 +0100
+++ logrotate-3.8.1/logrotate.c	2012-05-17 00:36:28.370623567 +0100
@@ -1009,14 +1009,16 @@
 		/* glob for uncompressed files with our pattern */
 		if (asprintf(&glob_pattern, "%s/%s%s%s", rotNames->dirName,
 					rotNames->baseName, dext_pattern, fileext) < 0) {
-			message(MESS_ERROR, "could not allocate glob pattern memory\n");
+			message(MESS_FATAL, "could not allocate glob pattern memory\n");
 		}
 	    rc = glob(glob_pattern, 0, globerr, &globResult);
 	    if (!rc && globResult.gl_pathc > 0) {
 		for (i = 0; i < globResult.gl_pathc && !hasErrors; i++) {
 		    struct stat sbprev;
 
-			asprintf(&oldName, "%s", (globResult.gl_pathv)[i]);
+			if (asprintf(&oldName, "%s", (globResult.gl_pathv)[i]) < 0) {
+				message(MESS_FATAL, "could not allocate glob result memory\n");
+			}
 			if (stat(oldName, &sbprev)) {
 			message(MESS_DEBUG,
 				"previous log %s does not exist\n",
@@ -1030,16 +1032,20 @@
 		message(MESS_DEBUG,
 			"glob finding logs to compress failed\n");
 		/* fallback to old behaviour */
-		asprintf(&oldName, "%s/%s.%d%s", rotNames->dirName,
-			rotNames->baseName, logStart, fileext);
+		if (asprintf(&oldName, "%s/%s.%d%s", rotNames->dirName,
+			rotNames->baseName, logStart, fileext) < 0) {
+				message(MESS_FATAL, "could not allocate oldName memory\n");
+			}
 		free(oldName);
 	    }
 	    globfree(&globResult);
 	    free(glob_pattern);
 	} else {
 	    struct stat sbprev;
-	    asprintf(&oldName, "%s/%s.%d%s", rotNames->dirName,
-		    rotNames->baseName, logStart, fileext);
+	    if (asprintf(&oldName, "%s/%s.%d%s", rotNames->dirName,
+		    rotNames->baseName, logStart, fileext) < 0) {
+			message(MESS_FATAL, "could not allocate oldName memory\n");
+	    }
 	    if (stat(oldName, &sbprev)) {
 		message(MESS_DEBUG, "previous log %s does not exist\n",
 			oldName);
@@ -1097,7 +1103,9 @@
 	    }
 	    if (mail_out != -1) {
 		/* oldName is oldest Backup found (for unlink later) */
-		asprintf(&oldName, "%s", (globResult.gl_pathv)[mail_out]);
+		if (asprintf(&oldName, "%s", (globResult.gl_pathv)[mail_out]) < 0) {
+		    message(MESS_FATAL, "could not allocate mailout memory\n");
+		}
 		rotNames->disposeName = malloc(strlen(oldName)+1);
 		strcpy(rotNames->disposeName, oldName);
 		free(oldName);
@@ -1120,8 +1128,10 @@
 	if (log->rotateAge) {
 	    struct stat fst_buf;
 	    for (i = 1; i <= rotateCount + 1; i++) {
-		asprintf(&oldName, "%s/%s.%d%s%s", rotNames->dirName,
-			rotNames->baseName, i, fileext, compext);
+		if (asprintf(&oldName, "%s/%s.%d%s%s", rotNames->dirName,
+			rotNames->baseName, i, fileext, compext) < 0) {
+		    message(MESS_FATAL, "could not allocate mailFilename memory\n");
+		}
 		if (!stat(oldName, &fst_buf)
 		    && (((nowSecs - fst_buf.st_mtime) / 60 / 60 / 24)
 			> log->rotateAge)) {
@@ -1137,9 +1147,11 @@
 	    }
 	}
 
-	asprintf(&oldName, "%s/%s.%d%s%s", rotNames->dirName,
+	if (asprintf(&oldName, "%s/%s.%d%s%s", rotNames->dirName,
 		rotNames->baseName, logStart + rotateCount, fileext,
-		compext);
+		compext) < 0) {
+	    message(MESS_FATAL, "could not allocate disposeName memory\n");
+	}
 	newName = strdup(oldName);
 
 	rotNames->disposeName = strdup(oldName);
@@ -1187,8 +1199,10 @@
 	for (i = rotateCount + logStart - 1; (i >= 0) && !hasErrors; i--) {
 		free(newName);
 		newName = oldName;
-		asprintf(&oldName, "%s/%s.%d%s%s", rotNames->dirName,
-		    rotNames->baseName, i, fileext, compext);
+		if (asprintf(&oldName, "%s/%s.%d%s%s", rotNames->dirName,
+		    rotNames->baseName, i, fileext, compext) < 0) {
+		    message(MESS_FATAL, "could not allocate oldName memory\n");
+		}
 
 	    message(MESS_DEBUG,
 		    "renaming %s to %s (rotatecount %d, logstart %d, i %d), \n",
@@ -1217,9 +1231,11 @@
 
 		if (asprintf(&(rotNames->finalName), "%s/%s%s%s", rotNames->dirName,
 					rotNames->baseName, dext_str, fileext) < 0) {
-			message(MESS_ERROR, "could not allocate finalName memory\n");
+			message(MESS_FATAL, "could not allocate finalName memory\n");
+		}
+		if (asprintf(&destFile, "%s%s", rotNames->finalName, compext) < 0) {
+			message(MESS_FATAL, "could not allocate destFile memory\n");
 		}
-		asprintf(&destFile, "%s%s", rotNames->finalName, compext);
 		if (!stat(destFile, &fst_buf)) {
 			message(MESS_DEBUG,
 					"destination %s already exists, skipping rotation\n",
@@ -1347,8 +1363,8 @@
 			    strlen(log->files[logNum]) + 10);
 		sprintf(rotNames->disposeName, "%s%s", rotNames->finalName,
 			(log->compress_ext
-			 && (log->flags & LOG_FLAG_COMPRESS)) ? log->
-			compress_ext : "");
+			 && (log->flags & LOG_FLAG_COMPRESS)) ?
+			log->compress_ext : "");
 		message(MESS_DEBUG, "disposeName will be %s\n",
 			rotNames->disposeName);
 	    }
Index: logrotate-3.8.1/logrotate.h
===================================================================
--- logrotate-3.8.1.orig/logrotate.h	2012-05-17 00:36:09.722279662 +0100
+++ logrotate-3.8.1/logrotate.h	2012-05-17 00:36:13.146342816 +0100
@@ -67,7 +67,7 @@
 extern int debug;
 
 int readAllConfigPaths(const char **paths);
-#if !defined(asprintf)
+#if !defined(asprintf) && !defined(_FORTIFY_SOURCE)
 int asprintf(char **string_ptr, const char *format, ...);
 #endif
 
